// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SecureFinance.Infrastructure.Data;

#nullable disable

namespace SecureFinance.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SecureFinance.Core.Models.ApiRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ResponseTimeMs")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("WasCached")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("RequestedAt");

                    b.HasIndex("UserId", "RequestedAt");

                    b.ToTable("ApiRequests");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastHealthCheck")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RateLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DataSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUrl = "https://www.alphavantage.co/query",
                            IsActive = true,
                            LastHealthCheck = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alpha Vantage",
                            RateLimit = 5
                        },
                        new
                        {
                            Id = 2,
                            BaseUrl = "https://api.coingecko.com/api/v3",
                            IsActive = true,
                            LastHealthCheck = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CoinGecko",
                            RateLimit = 50
                        },
                        new
                        {
                            Id = 3,
                            BaseUrl = "https://api.stlouisfed.org/fred",
                            IsActive = true,
                            LastHealthCheck = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FRED",
                            RateLimit = 120
                        },
                        new
                        {
                            Id = 4,
                            BaseUrl = "https://api.exchangerate-api.com/v4",
                            IsActive = true,
                            LastHealthCheck = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exchange Rates API",
                            RateLimit = 1500
                        });
                });

            modelBuilder.Entity("SecureFinance.Core.Models.EncryptionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedAesKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyIdentifier")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KeyIdentifier")
                        .IsUnique();

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("EncryptionKeys");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EncryptedSettings")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.ApiRequest", b =>
                {
                    b.HasOne("SecureFinance.Core.Models.DataSource", "DataSource")
                        .WithMany("ApiRequests")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecureFinance.Core.Models.User", "User")
                        .WithMany("ApiRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.EncryptionKey", b =>
                {
                    b.HasOne("SecureFinance.Core.Models.User", "User")
                        .WithMany("EncryptionKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.DataSource", b =>
                {
                    b.Navigation("ApiRequests");
                });

            modelBuilder.Entity("SecureFinance.Core.Models.User", b =>
                {
                    b.Navigation("ApiRequests");

                    b.Navigation("EncryptionKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
